# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: itcourse
# app and org for use with dashboard.serverless.com
app: it-course
# org: KSU

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x

# you can overwrite defaults here
  stage: dev
  region: ap-south-1

  environment:
    BSIT_COURSES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    COURSE_COORDINATOR_TABLE: "course-coordinator-${opt:stage, self:provider.stage}"
    COURSE_RESOURCES_TABLE: "course-resources-${opt:stage, self:provider.stage}"
    COURSE_ALG_TABLE: "course-alg-${opt:stage, self:provider.stage}"
    COURSE_PERM_SCHEDULE_TABLE: "course-perm-schedule-${opt:stage, self:provider.stage}"
    EXPLORE_DATA_TABLE: "explore-data-${opt:stage, self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  courseSubmission:
    handler: api/courses.submit
    memorySize: 128
    description: Submits course information
    events:
      - http:
          path: courses
          method: post
          cors: true
  getCourses:
    handler: api/courses.fetch
    memorySize: 128
    description: Fetches courses information
    events:
      - http:
          path: courses
          method: get
          cors: true
  getCourse:
    handler: api/courses.fetchSingleCourse
    memorySize: 128
    description: Fetches single course information
    events:
      - http:
          path: course
          method: get
          cors: true
  resourceSubmission:
    handler: api/courses.submitCourseResources
    memorySize: 128
    description: Submits course resources information
    events:
      - http:
          path: resources
          method: post
          cors: true
  getResources:
    handler: api/courses.fetchResources
    memorySize: 128
    description: Fetches course resources information
    events:
      - http:
          path: resources
          method: get
          cors: true
  getResource:
    handler: api/courses.fetchSingleResource
    memorySize: 128
    description: Fetch a single course resource information
    events:
      - http:
          path: resource
          method: get
          cors: true
  coordinatorSubmission:
    handler: api/courses.submitCoordinator
    memorySize: 128
    description: Submits coordinator information
    events:
      - http:
          path: coordinator
          method: post
          cors: true
  getCoordinators:
    handler: api/courses.fetchCoordinators
    memorySize: 128
    description: Fetches coordinator information
    events:
      - http:
          path: coordinator
          method: get
          cors: true
  getCoordinator:
    handler: api/courses.fetchSingleCoordinator
    memorySize: 128
    description: Fetches Single coordinator information
    events:
      - http:
          path: singleCoordinator
          method: get
          cors: true
  algSubmission:
    handler: api/courses.submitCourseALG
    memorySize: 128
    description: Submits ALG information
    events:
      - http:
          path: alg
          method: post
          cors: true
  getALG:
    handler: api/courses.fetchALG
    memorySize: 128
    description: Fetches ALG information
    events:
      - http:
          path: alg
          method: get
          cors: true
  getSingleALG:
    handler: api/courses.fetchSingleALG
    memorySize: 128
    description: Fetches Single ALG information
    events:
      - http:
          path: singleAlg
          method: get
          cors: true
  permScheduleSubmission:
    handler: api/courses.submitPermSchedule
    memorySize: 128
    description: Submits course perm schedule
    events:
      - http:
          path: permSchedules
          method: post
          cors: true
  getPermSchedules:
    handler: api/courses.fetchPermSchedules
    memorySize: 128
    description: Fetches course perm schedule
    events:
      - http:
          path: permSchedules
          method: get
          cors: true
  getPermSchedule:
    handler: api/courses.fetchSinglePermSchedule
    memorySize: 128
    description: Fetches single perm schedule information
    events:
      - http:
          path: permSchedule
          method: get
          cors: true
  getExploreData:
    handler: api/courses.getExploreData
    memorySize: 128
    description: Fetches the explore data 
    events:
      - http:
          path: exploreResponse
          method: post
          cors: true
  submitExploreData:
    handler: api/courses.submitExploreData
    memorySize: 128
    description: Submits the explore data 
    events:
      - http:
          path: submitExploreData
          method: post
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    BSITCoursesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.BSIT_COURSES_TABLE}
    CourseCoordinatorDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.COURSE_COORDINATOR_TABLE}
    CourseResourcesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.COURSE_RESOURCES_TABLE}
    CourseALGDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.COURSE_ALG_TABLE}
    CoursePermSchedulesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.COURSE_PERM_SCHEDULE_TABLE}
    ExploreDataDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.EXPLORE_DATA_TABLE}
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
